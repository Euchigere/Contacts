type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: "package contacts;\nimport java.time.LocalDateTime;\nimport java.time.LocalDate;\n\
    import java.util.*;\n\npublic class Main {\n    Scanner input = new Scanner(System.in);\n\
    \    List<Contact> contactList = new ArrayList<>();\n    \n    public static void\
    \ main(String[] args) {\n        Main main = new Main();\n        main.startMenu();\n\
    \    }\n    \n    void startMenu() {\n        String newLine = \"\";\n       \
    \ boolean startMenu = true;\n        while (startMenu) {\n            String action\
    \ = getInput(newLine + \"Enter action (add, remove, edit, count, info, exit):\"\
    );\n            newLine = \"\\n\";\n            \n            switch (action)\
    \ {\n                case \"add\":\n                    addContact();\n      \
    \              break;\n                case \"remove\":\n                    if\
    \ (!(contactList.size() > 0)) {\n                        System.out.println(\"\
    No records to remove!\");\n                        break;\n                  \
    \  }\n                    listContact();\n                    int indexToRemove\
    \ = Integer.parseInt(getInput(\"Select a record:\"));\n                    contactList.remove(indexToRemove\
    \ - 1);\n                    System.out.println(\"Record removed\");\n       \
    \             break;\n                case \"edit\":\n                    editContact();\n\
    \                    break;\n                case \"count\":\n               \
    \     System.out.printf(\"The Phone Book has %d records.%n\", contactList.size());\n\
    \                    break;\n                case \"info\":\n                \
    \    listContact();\n                    int contactIndex = Integer.parseInt(getInput(\"\
    Select a record:\"));\n                    System.out.println(contactList.get(contactIndex\
    \ - 1).info());\n                    break;\n                default:\n      \
    \              startMenu = false;\n            }\n        }\n    }\n    \n   \
    \ String getInput(String message) {\n        System.out.println(message);\n  \
    \      return input.nextLine();\n    }\n    \n    void addContact() {\n      \
    \  String contactType = getInput(\"Enter the type (person, organization)\");\n\
    \        \n        if (\"person\".equals(contactType)) {\n            String firstName\
    \ = getInput(\"Enter the name of the person:\");\n            String lastName\
    \ = getInput(\"Enter the surname of the person:\");\n            String date =\
    \ getInput(\"Enter the birth date:\");\n            LocalDate birthDate = (\"\
    null\".equals(date) || date.isEmpty()) ? null : LocalDate.parse(date);\n     \
    \       \n            String gender = getInput(\"Enter the gender:\");\n     \
    \       gender = \"null\".equals(gender) ? \"\" : gender;\n            \n    \
    \        String number = getInput(\"Enter the number:\");\n            PersonContact\
    \ contact = new PersonContact(firstName, lastName, birthDate, gender, number);\n\
    \            contact.setTimeCreated();\n            contact.setLastEdited();\n\
    \            contact.setPerson(true);\n            \n            contactList.add(contact);\n\
    \            System.out.println(\"The record added.\");\n            \n      \
    \  } else if (\"organization\".equals(contactType)) {\n            String name\
    \ = getInput(\"Enter the organization name:\");\n            String address =\
    \ getInput(\"Enter the address:\");\n            String number = getInput(\"Enter\
    \ the number:\");\n            \n            OrganizationContact contact = new\
    \ OrganizationContact(name, address, number);\n            contact.setTimeCreated();\n\
    \            contact.setLastEdited();\n            contact.setPerson(false);\n\
    \            \n            contactList.add(contact);\n            System.out.println(\"\
    The record added.\");\n        }\n    }\n    \n    void editContact() { \n   \
    \     if (contactList.size() <= 0) {\n            System.out.println(\"No records\
    \ to edit!\");\n            return;\n        }\n        listContact();\n     \
    \   int contactIndex = Integer.parseInt(getInput(\"Select a record:\"));\n   \
    \     Contact contact = contactList.get(contactIndex - 1);\n        \n       \
    \ if (contact.isPerson()) {\n            editPersonContact(contact);\n       \
    \ } else {\n            editOrganizationContact(contact);\n        }\n    \n \
    \       System.out.println(\"The record updated!\");\n            \n    }\n  \
    \  \n    void editPersonContact(Contact contact) {\n        PersonContact personContact\
    \ = (PersonContact) contact;\n        String fieldName = getInput(\"Select a field\
    \ (name, surname, birth, gender, number):\");\n        \n        switch (fieldName)\
    \ {\n            case \"name\":\n                personContact.setFirstName(getInput(\"\
    Enter the name:\"));\n                break;\n            case \"surname\":\n\
    \                personContact.setLastName(getInput(\"Enter the surname:\"));\n\
    \                break;\n            case \"birth\":\n                String birthDate\
    \ = getInput(\"Enter the birth date:\");\n                personContact.setBirthDate(\"\
    null\".equals(birthDate) ?\n                    null : LocalDate.parse(birthDate));\n\
    \                break;\n            case \"gender\":\n                String\
    \ gender = getInput(\"Enter the gender:\");\n                personContact.setGender(\"\
    null\".equals(gender) ?\n                    \"\" : gender);\n               \
    \ break;\n            default:\n                personContact.setNumber(getInput(\"\
    Enter the number:\"));\n        }\n        personContact.setLastEdited();\n  \
    \  }\n    \n    void editOrganizationContact(Contact contact) {\n        OrganizationContact\
    \ orgContact = (OrganizationContact) contact;\n        String fieldName = getInput(\"\
    Select a field (name, address, number):\");\n        \n        switch (fieldName)\
    \ {\n            case \"name\":\n                orgContact.setName(getInput(\"\
    Enter the name:\"));\n                break;\n            case \"address\":\n\
    \                orgContact.setAddress(getInput(\"Enter the surname:\"));\n  \
    \              break;\n            default:\n                orgContact.setNumber(getInput(\"\
    Enter the number:\"));\n        }\n        orgContact.setLastEdited();\n    }\n\
    \    \n    void listContact() {\n        if (contactList.size() <= 0) {\n    \
    \        System.out.println(\"No records to list!\");\n            return;\n \
    \       }\n        \n        int index = 1;\n        for (Contact contact : contactList)\
    \ {\n            System.out.printf(\"%d. %s%n\",\n                           \
    \     index++, contact.fullName());\n        }\n    }\n}\nabstract class Contact\
    \ {\n    private String number;\n    private LocalDateTime timeCreated;\n    private\
    \ LocalDateTime lastEdited;\n    private boolean isPerson;\n    \n    Contact(String\
    \ number) {\n        if(isValidNumber(number)) {\n            this.number = number;\n\
    \        } else {\n            this.number = \"\";\n        }\n    }\n    \n \
    \   public void setTimeCreated() {\n        this.timeCreated = LocalDateTime.now();\n\
    \    } \n    public LocalDateTime getTimeCreated() {\n        return timeCreated;\n\
    \    }\n    \n    public void setLastEdited() {\n        this.lastEdited = LocalDateTime.now();\n\
    \    }\n    public LocalDateTime getLastEdited() {\n        return lastEdited;\n\
    \    }\n    \n    public String getNumber() {\n        return number.isEmpty()\
    \ ?  \"[no number]\" : number;\n    }\n    public void setNumber(String number)\
    \ {\n        if (isValidNumber(number)) {\n            this.number = number;\n\
    \            return;\n        }\n        this.number = \"\";\n    }\n    \n  \
    \  private static boolean isValidNumber(String number) {\n        if (number.matches(\"\
    \\\\+?(\\\\w+(([ \\\\-]{1}\\\\w{2,})*)|\\\\(\\\\w+\\\\)(([ \\\\-]{1}\\\\w{2,})*)|\\\
    \\w+([ \\\\-]{1}\\\\(\\\\w{2,}\\\\))(([ \\\\-]{1}\\\\w{2,})*))\")) {\n       \
    \     return true;\n        }\n        System.out.println(\"Wrong number format!\"\
    );\n        return false;\n    }\n    \n    public boolean hasNumber() {\n   \
    \     return !getNumber().isEmpty();\n    }\n    \n    public void setPerson(boolean\
    \ isPerson) {\n        this.isPerson = isPerson;\n    }\n    \n    public boolean\
    \ isPerson() {\n        return isPerson;\n    }\n    \n    abstract String info();\n\
    \    \n    abstract String fullName();\n}\n\nclass PersonContact extends Contact\
    \ {\n    private String firstName;\n    private String lastName;\n    private\
    \ LocalDate birthDate;\n    private String gender;\n    \n    public PersonContact(String\
    \ firstName, String lastName, LocalDate birthDate, String gender, String number)\
    \ {\n        super(number);\n        this.firstName = firstName;\n        this.lastName\
    \ = lastName;\n        \n        if (birthDate == null) {\n            Alert(\"\
    Bad birth date!\");\n        }\n        this.birthDate = birthDate;\n        \n\
    \        if (gender == null || gender.isEmpty()) {\n            Alert(\"Bad gender!\"\
    );\n        }\n        this.gender = gender;\n    }\n    \n    public String getFirstName()\
    \ {\n        return firstName;\n    }\n    public void setFirstName(String firstName)\
    \ {\n        this.firstName = firstName;\n    }\n    \n    public String getLastName()\
    \ {\n        return lastName;\n    }\n    public void setLastName(String lastName)\
    \ {\n        this.lastName = lastName;\n    }\n    \n    public Object getBirthDate()\
    \ {\n        return birthDate == null ? \"[no data]\" : birthDate;\n    }\n  \
    \  public void setBirthDate(LocalDate birthDate) {\n        if (birthDate == null)\
    \ {\n            Alert(\"Bad birth date!\");\n        }\n        this.birthDate\
    \ = birthDate;\n    }\n    \n    public String getGender() {\n        return (gender\
    \ == null || gender.isEmpty())? \"[no data]\" : gender;\n    }\n    public void\
    \ setGender(String gender) {\n        if (gender == null || gender.isEmpty())\
    \ {\n            Alert(\"Bad gender!\");\n        }\n        this.gender = gender;\n\
    \    }\n    \n    private void Alert(String message) {\n        System.out.println(message);\n\
    \    }\n    \n    private boolean hasBirthDate() {\n        return birthDate !=\
    \ null ? true : false;\n    }\n    \n    @Override\n    public String fullName()\
    \ {\n        return getFirstName() + \" \" + getLastName();\n    }\n    \n   \
    \ @Override\n    public String info() {\n        return \"Name: \" + getFirstName()\
    \ + \"\\n\"\n            + \"Surname: \" + getLastName() +  \"\\n\"\n        \
    \    + \"Birth date: \" + getBirthDate() + \"\\n\"\n            + \"Gender: \"\
    \ + getGender() + \"\\n\"\n            + \"Number: \" + getNumber() + \"\\n\"\n\
    \            + \"Time created: \" + getTimeCreated() + \"\\n\"\n            +\
    \ \"Time last edit: \" + getLastEdited();\n    }\n}\n\nclass OrganizationContact\
    \ extends Contact {\n    private String name;\n    private String address;\n \
    \   \n    public OrganizationContact(String name, String address, String number)\
    \ {\n        super(number);\n        this.name = name;\n        this.address =\
    \ address;\n    }\n    \n    public String getName() {\n        return name;\n\
    \    }\n    public void setName(String name) {\n        this.name = name;\n  \
    \  }\n    \n    public String getAddress() {\n        return address;\n    }\n\
    \    public void setAddress(String address) {\n        this.address = address;\n\
    \    }\n    \n    @Override\n    public String fullName() {\n        return getName();\n\
    \    }\n    \n    @Override\n    public String info() {\n        return \"Organization\
    \ name: \" + getName() + \"\\n\"\n            + \"Address: \" + getAddress() +\
    \ \"\\n\"\n            + \"Number: \" + getNumber() + \"\\n\"\n            + \"\
    Time created: \" + getTimeCreated() + \"\\n\"\n            + \"Time last edit:\
    \ \" + getLastEdited(); \n    }\n}\n"
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.stage.StageTest;\nimport\
    \ org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends StageTest<TestClue> {\n\n    public ContactsTest()\
    \ {\n        super(Main.class);\n    }\n    private CheckResult splitActionsFeedback(int\
    \ actualSize, int needSize) {\n        if (actualSize < needSize) {\n        \
    \    return CheckResult.wrong(String.format(\"This test should contain at least\
    \ %d actions, but you have only %d. \" +\n                            \"You should\
    \ separate your actions with an empty line.\",\n                    needSize,\n\
    \                    actualSize));\n        } else {\n            return null;\n\
    \        }\n    }\n    \n    @Override\n    public List<TestCase<TestClue>> generate()\
    \ {\n        return List.of (\n            new TestCase<TestClue>()\n        \
    \        .setInput(\"exit\")\n                .setAttach(new TestClue(output ->\
    \ {\n                    output = output.strip().toLowerCase();\n            \
    \        if (!output.contains(\"enter action\")) {\n                        return\
    \ new CheckResult(false,\n                            \"I didn't see where \\\"\
    Enter action\\\" part in the responsesFromClient\");\n                    }\n\
    \                    return CheckResult.correct();\n                })),\n\n \
    \           new TestCase<TestClue>()\n                .setInput(\n           \
    \         \"count\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (!output.contains(\"0 records\")) {\n                \
    \        return new CheckResult(false,\n                            \"No \\\"\
    0 records\\\" part \" +\n                                \"in the responsesFromClient\
    \ in a place where it should be\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"count\\n\" +\n                    \"exit\")\n               \
    \ .setAttach(new TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (output.contains(\"0 records\")) {\n                 \
    \       return new CheckResult(false,\n                            \"Can't add\
    \ the person\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n          \
    \          \n                    String infoBlock = blocks[2];\n             \
    \       if (!infoBlock.contains(\"Name: John\")\n                        || !infoBlock.contains(\"\
    Surname: Smith\")\n                        || !infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Gender: [no data]\"\
    )\n                        || !infoBlock.contains(\"Number: 123 456 789\")\n \
    \                       || !infoBlock.contains(\"Time created:\")\n          \
    \              || !infoBlock.contains(\"Time last edit:\")) {\n              \
    \          return new CheckResult(false,\n                            \"Something\
    \ wrong with printing user info\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n    \n                    String\
    \ infoBlock = blocks[2];\n                    if (!infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                        || !infoBlock.contains(\"Address:\
    \ Wall St. 1\")\n                        || !infoBlock.contains(\"Number: +0 (123)\
    \ 456-789-9999\")\n                        || !infoBlock.contains(\"Time created:\"\
    )\n                        || !infoBlock.contains(\"Time last edit:\")) {\n  \
    \                      return new CheckResult(false,\n                       \
    \     \"Something wrong with printing organization info\");\n                \
    \    }\n                    return CheckResult.correct();\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"person\\n\" +\n          \
    \              \"John\\n\" +\n                        \"Smith\\n\" +\n       \
    \                 \"\\n\" +\n                        \"\\n\" +\n             \
    \           \"123 456 789\\n\" +\n                    \"list\\n\" +\n        \
    \            \"1\\n\" +\n                    \"edit\\n\" +\n                 \
    \       \"gender\\n\" +\n                        \"M\\n\" +\n                \
    \    \"menu\\n\" +\n                    \"list\\n\" +\n                    \"\
    1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\")\n \
    \               .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 6);\n              \
    \      if (feedback != null) return feedback;\n    \n                    String\
    \ infoBlock = blocks[5];\n                    if (!infoBlock.contains(\"Name:\
    \ John\")\n                        || !infoBlock.contains(\"Surname: Smith\")\n\
    \                        || !infoBlock.contains(\"Birth date: [no data]\")\n \
    \                       || !infoBlock.contains(\"Gender: M\")\n              \
    \          || !infoBlock.contains(\"Number: 123 456 789\")\n                 \
    \       || !infoBlock.contains(\"Time created:\")\n                        ||\
    \ !infoBlock.contains(\"Time last edit:\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Editing person is not\
    \ working\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"list\\n\" +\n                    \"1\\n\" +\n           \
    \         \"edit\\n\" +\n                        \"address\\n\" +\n          \
    \              \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n       \
    \             \"list\\n\" +\n                    \"1\\n\" +\n                \
    \    \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n          \
    \          \n                    String infoBlock = blocks[5];\n             \
    \       if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n         \
    \               || !infoBlock.contains(\"Address: Wall St 2\")\n             \
    \           || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\")\n      \
    \                  || !infoBlock.contains(\"Time created:\")\n               \
    \         || !infoBlock.contains(\"Time last edit:\")) {\n                   \
    \     return new CheckResult(false,\n                            \"Editing organization\
    \ is not working\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"add\\n\" +\n                        \"person\\n\" +\n   \
    \                     \"John\\n\" +\n                        \"Smith\\n\" +\n\
    \                        \"\\n\" +\n                        \"\\n\" +\n      \
    \                  \"123 456 789\\n\" +\n                    \"add\\n\" +\n  \
    \                      \"organization\\n\" +\n                        \"PizzaNuts\\\
    n\" +\n                        \"Wall St. 6\\n\" +\n                        \"\
    +0 (123) 456-789-9999\\n\" +\n                    \"search\\n\" +\n          \
    \              \"pizz\\n\" +\n                    \"1\\n\" +\n               \
    \     \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n    \n    \
    \                \n                    String infoBlock = blocks[3];\n       \
    \             if (!infoBlock.contains(\"Pizza Shop\")\n                      \
    \  || !infoBlock.contains(\"PizzaNuts\")\n                        || infoBlock.contains(\"\
    John\")) {\n                        return new CheckResult(false,\n          \
    \                  \"Search is not working\");\n                    }\n      \
    \              return CheckResult.correct();\n                })),\n\n       \
    \     new TestCase<TestClue>()\n                .setInput(\n                 \
    \   \"add\\n\" +\n                        \"organization\\n\" +\n            \
    \            \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\" +\n\
    \                        \"+0 (123) 456-789-9999\\n\" +\n                    \"\
    add\\n\" +\n                        \"person\\n\" +\n                        \"\
    John\\n\" +\n                        \"Smith\\n\" +\n                        \"\
    \\n\" +\n                        \"\\n\" +\n                        \"123 456\
    \ 789\\n\" +\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"PizzaNuts\\n\" +\n                        \"\
    Wall St. 6\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"search\\n\" +\n                        \"s\\n\" +\n     \
    \               \"1\\n\" +\n                    \"menu\\n\" +\n              \
    \      \"exit\")\n                .setAttach(new TestClue(output -> {\n      \
    \              String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                    var feedback = splitActionsFeedback(blocks.length, 4);\n\
    \                    if (feedback != null) return feedback;\n                \
    \    \n                    String infoBlock = blocks[3];\n                   \
    \ if (!infoBlock.contains(\"Pizza Shop\")\n                        || !infoBlock.contains(\"\
    John Smith\")\n                        || !infoBlock.contains(\"PizzaNuts\"))\
    \ {\n                        return new CheckResult(false,\n                 \
    \           \"Search is not working\");\n                    }\n             \
    \       return CheckResult.correct();\n                })),\n\n        new TestCase<TestClue>()\n\
    \            .setInput(\n                \"add\\n\" +\n                    \"\
    organization\\n\" +\n                    \"Pizza Shop\\n\" +\n               \
    \     \"Wall St. 1\\n\" +\n                    \"+0 (123) 456-789-9999\\n\" +\n\
    \                \"add\\n\" +\n                    \"person\\n\" +\n         \
    \           \"John\\n\" +\n                    \"Smith\\n\" +\n              \
    \      \"\\n\" +\n                    \"\\n\" +\n                    \"123 456\
    \ 789\\n\" +\n                \"add\\n\" +\n                    \"organization\\\
    n\" +\n                    \"PizzaNuts\\n\" +\n                    \"Wall St.\
    \ 6\\n\" +\n                    \"+0 (123) 456-781-9999\\n\" +\n             \
    \   \"search\\n\" +\n                    \"789\\n\" +\n                \"1\\n\"\
    \ +\n                \"menu\\n\" +\n                \"exit\")\n            .setAttach(new\
    \ TestClue(output -> {\n                String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                if (feedback != null) return feedback;\n    \n        \
    \        String infoBlock = blocks[3];\n                if (!infoBlock.contains(\"\
    Pizza Shop\")\n                    || !infoBlock.contains(\"John Smith\")\n  \
    \                  || infoBlock.contains(\"PizzaNuts\")) {\n                 \
    \   return new CheckResult(false,\n                        \"Search by phone number\
    \ is not working\");\n                }\n                return CheckResult.correct();\n\
    \            }))\n        );\n    }\n\n    @Override\n    public CheckResult check(String\
    \ reply, TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: PhoneBook.db
  visible: true
  learner_created: true
- name: src/contacts/SerializationUtil.java
  visible: true
  learner_created: true
- name: src/contacts/Command.java
  visible: true
  learner_created: true
- name: src/contacts/Organization.java
  visible: true
  learner_created: true
- name: src/contacts/Person.java
  visible: true
  learner_created: true
- name: src/contacts/Record.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/231/implement
status: Solved
record: 3
